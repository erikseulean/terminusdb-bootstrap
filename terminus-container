#!/bin/bash

set +o allexport

#
# CONFIG
#

# Load ENV file

if [ -f ENV ]; then
  set -o allexport
  # shellcheck disable=SC1091
  # shellcheck source=ENV
  source "$(pwd)/ENV"
  set +o allexport
fi

# Container
CONTAINER=${TERMINUS_CONTAINER:-terminus-server}
REPOSITORY=${TERMINUS_REPOSITORY:-terminusdb/$CONTAINER}
TAG=${TERMINUS_TAG:-dev} 

# Server
SCHEME=${TERMINUS_SCHEME:-http}
SERVER=${TERMINUS_SERVER:-localhost}
SERVER_PORT=${TERMINUS_SERVER_PORT:-6363}
PORT=${TERMINUS_PORT:-6363}
WORKERS=${TERMINUS_WORKERS:-8}
PASS=${TERMINUS_PASS:-root}
CONSOLE=${TERMINUS_CONSOLE:-$SCHEME://$SERVER:$PORT/console}
AUTOATTACH=${TERMINUS_AUTOATTACH:-true}
AUTOLOGIN=${TERMINUS_AUTOLOGIN:-true}

if [[ "$OSTYPE" == "darwin" || "$TERM_PROGRAM" == "Apple_Terminal" ]];
then
  DOCKER_DEFAULT="docker"
elif command -v sudo >/dev/null;
then
  DOCKER_DEFAULT="sudo docker"
else
  DOCKER_DEFAULT="docker"
fi

DOCKER=${TERMINUS_DOCKER:-$DOCKER_DEFAULT}

if [[ -z "$TERMINUS_PUBLIC_URL" ]];
then
  SET_PUBLIC=""
 else
  SET_PUBLIC="-e PUBLIC_URL=\"$TERMINUS_PUBLIC_URL\""
fi

if [[ -z "$TERMINUS_LOCAL" ]];
then
  MOUNT_LOCAL=""
 else
  MOUNT_LOCAL="-v \"$TERMINUS_LOCAL\":/app/local_files"
  printf "\nMOUNT \"%s\" \nTO \"/app/local_files\"\n" "$TERMINUS_LOCAL"
fi

# CONSTANTS

# Volumes
readonly TERMINUS_STORAGE=${TERINUS_TERMINUS_STORAGE:-terminus_storage}
readonly TERMINUS_CONFIG=${TERMINUS_TERMINUS_CONFIG:-terminus_config}
readonly STORAGE_VOLUME=${TERMINUS_STORAGE_VOLUME:-/app/terminusdb/storage}
readonly CONFIG_VOLUME=${TERMINUS_CONFIG_VOLUME:-/app/terminusdb/config}

#
# FUNCTIONS
#

_usage () {
  printf "\
USAGE:
  terminus-container [COMMAND]

  help        show usage
  run         run container
  stop        stop container
  console     launch console in web browser
  attach      attach to prolog shell
  stats       show container stats
  rm-config   remove config volume
  rm-storage  remove storage volume
  rm          remove volumes\n"
}

_confirm() {
  read -r -p "Are you sure? [y/N] " RESPONSE
  case "$RESPONSE" in
      [yY][eE][sS]|[yY]) 
          return 0
      ;;
      *)
          return 1
      ;;
  esac
  printf "\n"
}

_run () {
  if [[ $TAG == "latest" || $TAG == "dev" ]];
  then
    $DOCKER image rm "$REPOSITORY:$TAG" 2>/dev/null
  fi
  eval "$DOCKER" run -d -it --rm \
    "--name \"$CONTAINER\" -p \"$PORT:$SERVER_PORT\"" \
    "-v \"$TERMINUS_STORAGE:$STORAGE_VOLUME:rw\"" \
    "-v \"$TERMINUS_CONFIG:$CONFIG_VOLUME:rw\"" \
    "$MOUNT_LOCAL" \
    "$SET_PUBLIC" \
    "-e TERMINUS_SERVER_NAME=\"$SERVER\"" \
    "-e TERMINUS_SERVER_PORT=\"$SERVER_PORT\"" \
    "-e TERMINUS_ADMIN_PASS=\"$PASS\"" \
    "-e TERMINUS_AUTOATTACH=\"$AUTOATTACH\"" \
    "-e TERMINUS_AUTOLOGIN=\"$AUTOLOGIN\"" \
    "$REPOSITORY:$TAG"
}

_stop () {
  $DOCKER stop "$CONTAINER"
}

_restart () {
  $DOCKER stop "$CONTAINER"
}

_attach () {
  $DOCKER attach "$CONTAINER"
}

_stats () {
  $DOCKER stats "$CONTAINER"
}

_rm-config () {
 if _confirm
 then
    $DOCKER volume rm "$TERMINUS_CONFIG"
 fi
}

_rm-storage () {
 if _confirm
 then
    $DOCKER volume rm "$TERMINUS_STORAGE"
 fi
}

_rm () {
 if _confirm
 then
   $DOCKER volume rm "$TERMINUS_STORAGE" \
     && $DOCKER volume rm "$TERMINUS_CONFIG"
 fi
}

_console () {

if command -v python >/dev/null;
then
  python -m webbrowser "$CONSOLE"
else
  printf "\nopen %s in your browser\n" "$CONSOLE"
fi
}

_serve () {
if command -v python >/dev/null;
then
  python -m http.server 8888
else
  printf "\npython is required for this feature\n"
fi
}

#
# PROCESS ARGS
#

printf "\n"

if [ -n "$1" ]; then
  case "$1" in
    "run")
      # _build
      _run > /dev/null \
        && printf "terminus-server container started %s\n" "$CONSOLE" \
        || printf "\nIs the container already running?\n"
    ;;
    "stop")
      _stop > /dev/null \
        && printf "terminus-server container stopped\n" \
        || printf "\nIs the container running?\n"
    ;;
    "console")
      _console \
        || printf "this command requires python\n"
    ;;
    "attach")
      printf "Ctrl+p Ctrl+q to detach\n\n"
      _attach
    ;;
    "stats")
      _stats \
        || printf "\nIs the container running?\n"
    ;;
    "rm-config")
      printf "This will delete config volume\n"
      _rm-config \
        || printf "\nIs the container stopped?\n"
    ;;
    "rm-storage")
      printf "This will delete storage volume\n"
      _rm-storage \
        || printf "\nIs the container stopped?\n"
    ;;
    "rm")
      printf "This will delete storage and config volumes\n"
      _rm \
        || printf "\nIs the container stopped?\n"
    ;;
    "help")
      _usage
    ;;
    "serve")
      _serve
    ;;
    *)
      printf "invalid command\n\n"
      _usage
    ;;
  esac
else
  _usage
fi

printf "\n"

# vim:ft=sh
