#!/bin/bash

set +o allexport

#
# CONFIG
#

# Load ENV file

if [ -f ENV ]; then
  set -o allexport
  # shellcheck disable=SC1091
  # shellcheck source=ENV
  source "$(pwd)/ENV"
  set +o allexport
fi

# Container
TERMINUSDB_QUICKSTART_CONTAINER=${TERMINUSDB_CONTAINER:-terminus-server}
TERMINUSDB_QUICKSTART_REPOSITORY=${TERMINUSDB_REPOSITORY:-terminusdb/$TERMINUSDB_QUICKSTART_CONTAINER}
TERMINUSDB_QUICKSTART_TAG=${TERMINUSDB_TAG:-dev} 

# Server
TERMINUSDB_QUICKSTART_SCHEME=${TERMINUSDB_SCHEME:-http}
TERMINUSDB_QUICKSTART_SERVER=${TERMINUSDB_SERVER:-localhost}
TERMINUSDB_QUICKSTART_SERVER_PORT=${TERMINUSDB_SERVER_PORT:-6363}
TERMINUSDB_QUICKSTART_PORT=${TERMINUSDB_PORT:-6363}
TERMINUSDB_QUICKSTART_PASS=${TERMINUSDB_PASS:-root}
TERMINUSDB_QUICKSTART_CONSOLE=${TERMINUSDB_CONSOLE:-$TERMINUSDB_QUICKSTART_SCHEME://$TERMINUSDB_QUICKSTART_SERVER:$TERMINUSDB_QUICKSTART_PORT/console}
TERMINUSDB_QUICKSTART_AUTOATTACH=${TERMINUSDB_AUTOATTACH:-true}
TERMINUSDB_QUICKSTART_AUTOLOGIN=${TERMINUSDB_AUTOLOGIN:-true}

if [[ "$OSTYPE" == "darwin" || "$TERM_PROGRAM" == "Apple_Terminal" ]];
then
  TERMINUSDB_QUICKSTART_DOCKER_DEFAULT="docker"
elif command -v sudo >/dev/null;
then
  TERMINUSDB_QUICKSTART_DOCKER_DEFAULT="sudo docker"
else
  TERMINUSDB_QUICKSTART_DOCKER_DEFAULT="docker"
fi

TERMINUSDB_QUICKSTART_DOCKER=${TERMINUSDB_DOCKER:-$TERMINUSDB_QUICKSTART_DOCKER_DEFAULT}

function remove_old_volumes {
  read -p "Are you sure? [y/N] " -r -n 1
  printf "\n"    # (optional) move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
      if ! $TERMINUSDB_QUICKSTART_DOCKER volume rm terminus_config terminus_storage; then
          printf "Could not remove volumes. Are you running an existing container of TerminusDB? Stop it first.\n"
      fi
  else
      exit 2
  fi
}

function version_check {
  # The old TerminusDB had a prefix.db file needed, the new one
  # does not as prefixes are handled in a different way. Therefore
  # it is safe to assume that an existing storage volume with the
  # prefix.db is a user running an old version of TerminusDB
  if ! $TERMINUSDB_QUICKSTART_DOCKER volume inspect terminus_storage > /dev/null 2>&1; then
      return 0
  fi

  if $TERMINUSDB_QUICKSTART_DOCKER run --rm -v terminus_storage:/home/ alpine cat /home/prefix.db > /dev/null 2>&1; then
      printf "\
You are running an old version of terminus-server. The new %s version
uses a very different data structure which breaks backwards compatibility.
Continuing will remove your existing databases.\n" "$TERMINUSDB_QUICKSTART_TAG"
      remove_old_volumes
  fi
}

if [[ -z "$TERMINUSDB_PUBLIC_URL" ]];
then
  TERMINUSDB_QUICKSTART_SET_PUBLIC=""
 else
  TERMINUSDB_QUICKSTART_SET_PUBLIC="-e TERMINUSDB_PUBLIC_URL=\"$TERMINUSDB_PUBLIC_URL\""
fi

if [[ -z "$TERMINUSDB_LABEL_FILE" ]];
then
  TERMINUSDB_QUICKSTART_SET_LABEL_FILE=""
 else
  TERMINUSDB_QUICKSTART_SET_LABEL_FILE="--label-file \"$TERMINUSDB_LABEL_FILE\""
fi

if [[ -z "$TERMINUSDB_NETWORK" ]];
then
  TERMINUSDB_QUICKSTART_SET_NETWORK=""
 else
  TERMINUSDB_QUICKSTART_SET_NETWORK="--network \"$TERMINUSDB_NETWORK\""
fi

if [[ -z "$TERMINUSDB_LOCAL" ]];
then
  TERMINUSDB_QUICKSTART_MOUNT_LOCAL=""
 else
  TERMINUSDB_QUICKSTART_MOUNT_LOCAL="-v \"$TERMINUSDB_LOCAL\":/app/local_files"
  printf "\nMOUNT \"%s\" \nTO \"/app/local_files\"\n" "$TERMINUSDB_LOCAL"
fi

# CONSTANTS

# Volumes
readonly TERMINUSDB_STORAGE=${TERINUS_TERMINUSDB_STORAGE:-terminus_storage}
readonly TERMINUSDB_STORAGE_VOLUME=${TERMINUSDB_STORAGE_VOLUME:-/app/terminusdb/storage}

#
# FUNCTIONS
#

# Run platform check
function _platform_check {
  PLATFORM_ARCHITECTURE=$(uname -m)
  if [[ $PLATFORM_ARCHITECTURE != "x86_64" ]]; then
      printf "\
There are no Docker images for other CPU architectures than x86_64 yet.
You can try to manually compile the components of TerminusDB by following the
instructions on the terminus-server repository although other architectures are not
officially supported yet.
https://github.com/terminusdb/terminus-server/blob/master/docs/BUILD.md \n"
      exit 4
  fi
}

_usage () {
  printf "\
USAGE:
  terminusdb-container [COMMAND]

  help        show usage
  run         run container
  stop        stop container
  console     launch console in web browser
  attach      attach to prolog shell
  stats       show container stats
  rm          remove volumes
  test        run the unit tests on terminus-server\n"
}

_confirm() {
  read -r -p "Are you sure? [y/N] " RESPONSE
  case "$RESPONSE" in
      [yY][eE][sS]|[yY]) 
          return 0
      ;;
      *)
          return 1
      ;;
  esac
  printf "\n"
}

_run () {
  if [[ $TERMINUSDB_QUICKSTART_TAG == "latest" || $TERMINUSDB_QUICKSTART_TAG == "dev" ]];
  then
    $TERMINUSDB_QUICKSTART_DOCKER image rm "$TERMINUSDB_QUICKSTART_REPOSITORY:$TERMINUSDB_QUICKSTART_TAG" 2>/dev/null
  fi
  eval "$TERMINUSDB_QUICKSTART_DOCKER" run -d -it --rm \
    "--name \"$TERMINUSDB_QUICKSTART_CONTAINER\" -p \"$TERMINUSDB_QUICKSTART_PORT:$TERMINUSDB_QUICKSTART_SERVER_PORT\"" \
    "-v \"$TERMINUSDB_STORAGE:$TERMINUSDB_STORAGE_VOLUME:rw\"" \
    "$TERMINUSDB_QUICKSTART_MOUNT_LOCAL" \
    "$TERMINUSDB_QUICKSTART_SET_PUBLIC" \
    "$TERMINUSDB_QUICKSTART_SET_LABEL_FILE" \
    "$TERMINUSDB_QUICKSTART_SET_NETWORK" \
    "-e TERMINUSDB_SERVER_NAME=\"http://$TERMINUSDB_QUICKSTART_SERVER\"" \
    "-e TERMINUSDB_SERVER_PORT=\"$TERMINUSDB_QUICKSTART_SERVER_PORT\"" \
    "-e TERMINUSDB_ADMIN_PASS=\"$TERMINUSDB_QUICKSTART_PASS\"" \
    "-e TERMINUSDB_AUTOATTACH=\"$TERMINUSDB_QUICKSTART_AUTOATTACH\"" \
    "-e TERMINUSDB_AUTOLOGIN=\"$TERMINUSDB_QUICKSTART_AUTOLOGIN\"" \
    "$TERMINUSDB_QUICKSTART_REPOSITORY:$TERMINUSDB_QUICKSTART_TAG"
}

_stop () {
  $TERMINUSDB_QUICKSTART_DOCKER stop "$TERMINUSDB_QUICKSTART_CONTAINER"
}

_restart () {
  $TERMINUSDB_QUICKSTART_DOCKER stop "$TERMINUSDB_QUICKSTART_CONTAINER"
}

_attach () {
  $TERMINUSDB_QUICKSTART_DOCKER attach "$TERMINUSDB_QUICKSTART_CONTAINER"
}

_stats () {
  $TERMINUSDB_QUICKSTART_DOCKER stats "$TERMINUSDB_QUICKSTART_CONTAINER"
}

_rm () {
 if _confirm
 then
    $TERMINUSDB_QUICKSTART_DOCKER volume rm "$TERMINUSDB_STORAGE"
 fi
}

_tests () {
 eval "$TERMINUSDB_QUICKSTART_DOCKER" run -it --rm \
    "--name \"$TERMINUSDB_QUICKSTART_CONTAINER\" -p \"$TERMINUSDB_QUICKSTART_PORT:$TERMINUSDB_QUICKSTART_SERVER_PORT\"" \
    "$TERMINUSDB_QUICKSTART_SET_PUBLIC" \
    "-e TERMINUSDB_SERVER_NAME=\"http://$TERMINUSDB_QUICKSTART_SERVER\"" \
    "-e TERMINUSDB_SERVER_PORT=\"$TERMINUSDB_QUICKSTART_SERVER_PORT\"" \
    "-e TERMINUSDB_ADMIN_PASS=\"$TERMINUSDB_QUICKSTART_PASS\"" \
    "-e TERMINUSDB_AUTOATTACH=\"$TERMINUSDB_QUICKSTART_AUTOATTACH\"" \
    "-e TERMINUSDB_AUTOLOGIN=\"$TERMINUSDB_QUICKSTART_AUTOLOGIN\"" \
    "$TERMINUSDB_QUICKSTART_REPOSITORY:$TERMINUSDB_QUICKSTART_TAG" "bash -c './utils/db_util -k root -s localhost && swipl -g run_tests -g halt ./start.pl'"
}

_rm () {
 if _confirm
 then
   $TERMINUSDB_QUICKSTART_DOCKER volume rm "$TERMINUSDB_STORAGE"
 fi
}

_console () {

if command -v python >/dev/null;
then
  python -m webbrowser "$TERMINUSDB_QUICKSTART_CONSOLE"
else
  printf "\nopen %s in your browser\n" "$TERMINUSDB_QUICKSTART_CONSOLE"
fi
}

_serve () {
if command -v python >/dev/null;
then
  python -m http.server 8888
else
  printf "\npython is required for this feature\n"
fi
}

_platform_check
#
# PROCESS ARGS
#

printf "\n"

if [ -n "$1" ]; then
  case "$1" in
    "run")
      # _build
      version_check
      _run > /dev/null \
        && printf "terminus-server container started %s\n" "$TERMINUSDB_QUICKSTART_CONSOLE" \
        || printf "\nIs the container already running?\n"
    ;;
    "stop")
      _stop > /dev/null \
        && printf "terminus-server container stopped\n" \
        || printf "\nIs the container running?\n"
    ;;
    "console")
      _console \
        || printf "this command requires python\n"
    ;;
    "attach")
      printf "Ctrl+p Ctrl+q to detach\n\n"
      _attach
    ;;
    "stats")
      _stats \
        || printf "\nIs the container running?\n"
    ;;
    "rm")
      printf "This will delete storage volume\n"
      _rm \
        || printf "\nIs the container stopped?\n"
    ;;
    "test")
      printf "This will run the tests on terminus-server\n"
      _tests \
    ;;
    "help")
      _usage
    ;;
    "serve")
      _serve
    ;;
    *)
      printf "invalid command\n\n"
      _usage
    ;;
  esac
else
  _usage
fi

printf "\n"

# vim:ft=sh
